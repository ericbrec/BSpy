import numpy as np
import scipy.integrate
import pytest
import bspy
import math

myCurve = bspy.Spline(1, 2, [4], [5], [[0,0,0,0,0.3,1,1,1,1]], [[0, 0], [0.3, 1],
                    [0.5, 0.0], [0.7, -0.5], [1, 1]])
truthCurve = \
[[0.000000000000000000e+00, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [1.000000000000000021e-02, 2.920888888888888840e-02, 9.571648148148148572e-02],
 [2.000000000000000042e-02, 5.687111111111110839e-02, 1.830651851851851641e-01],
 [2.999999999999999889e-02, 8.303999999999998882e-02, 2.623449999999999949e-01],
 [4.000000000000000083e-02, 1.077688888888889002e-01, 3.338548148148148820e-01],
 [5.000000000000000278e-02, 1.311111111111110950e-01, 3.978935185185185630e-01],
 [5.999999999999999778e-02, 1.531200000000000339e-01, 4.547600000000000531e-01],
 [7.000000000000000666e-02, 1.738488888888889139e-01, 5.047531481481482007e-01],
 [8.000000000000000167e-02, 1.933511111111111402e-01, 5.481718518518519101e-01],
 [8.999999999999999667e-02, 2.116800000000000070e-01, 5.853150000000000297e-01],
 [1.000000000000000056e-01, 2.288888888888888917e-01, 6.164814814814815191e-01],
 [1.100000000000000006e-01, 2.450311111111111440e-01, 6.419701851851852270e-01],
 [1.199999999999999956e-01, 2.601600000000000024e-01, 6.620800000000001129e-01],
 [1.300000000000000044e-01, 2.743288888888888999e-01, 6.771098148148148033e-01],
 [1.400000000000000133e-01, 2.875911111111111307e-01, 6.873585185185184798e-01],
 [1.499999999999999944e-01, 2.999999999999999889e-01, 6.931249999999999911e-01],
 [1.600000000000000033e-01, 3.116088888888888242e-01, 6.947081481481480747e-01],
 [1.700000000000000122e-01, 3.224711111111110973e-01, 6.924068518518518012e-01],
 [1.799999999999999933e-01, 3.326399999999999912e-01, 6.865200000000000191e-01],
 [1.900000000000000022e-01, 3.421688888888889113e-01, 6.773464814814815771e-01],
 [2.000000000000000111e-01, 3.511111111111111516e-01, 6.651851851851853237e-01],
 [2.099999999999999922e-01, 3.595199999999999507e-01, 6.503349999999999964e-01],
 [2.200000000000000011e-01, 3.674488888888888805e-01, 6.330948148148147769e-01],
 [2.300000000000000100e-01, 3.749511111111111239e-01, 6.137635185185186248e-01],
 [2.399999999999999911e-01, 3.820800000000000307e-01, 5.926400000000000556e-01],
 [2.500000000000000000e-01, 3.888888888888888395e-01, 5.700231481481481399e-01],
 [2.600000000000000089e-01, 3.954311111111110666e-01, 5.462118518518517263e-01],
 [2.700000000000000178e-01, 4.017599999999999505e-01, 5.215049999999998853e-01],
 [2.800000000000000266e-01, 4.079288888888888964e-01, 4.962014814814813546e-01],
 [2.899999999999999800e-01, 4.139911111111110875e-01, 4.706001851851852602e-01],
 [2.999999999999999889e-01, 4.199999999999999845e-01, 4.449999999999999512e-01],
 [3.099999999999999978e-01, 4.260004664723031631e-01, 4.196546793002914888e-01],
 [3.200000000000000067e-01, 4.320037317784256592e-01, 3.946374344023322323e-01],
 [3.300000000000000155e-01, 4.380125947521865681e-01, 3.699763411078715869e-01],
 [3.400000000000000244e-01, 4.440298542274052629e-01, 3.456994752186587916e-01],
 [3.500000000000000333e-01, 4.500583090379008944e-01, 3.218349125364429741e-01],
 [3.599999999999999867e-01, 4.561007580174927245e-01, 2.984107288629737620e-01],
 [3.699999999999999956e-01, 4.621600000000000152e-01, 2.754550000000000054e-01],
 [3.800000000000000044e-01, 4.682388338192420285e-01, 2.529958017492711653e-01],
 [3.900000000000000133e-01, 4.743400583090378597e-01, 2.310612099125364527e-01],
 [4.000000000000000222e-01, 4.804664723032070484e-01, 2.096793002915451620e-01],
 [4.100000000000000311e-01, 4.866208746355684678e-01, 1.888781486880466154e-01],
 [4.199999999999999845e-01, 4.928060641399416020e-01, 1.686858309037901626e-01],
 [4.299999999999999933e-01, 4.990248396501458239e-01, 1.491304227405248206e-01],
 [4.400000000000000022e-01, 5.052800000000000624e-01, 1.302400000000000502e-01],
 [4.500000000000000111e-01, 5.115743440233236905e-01, 1.120426384839650347e-01],
 [4.600000000000000200e-01, 5.179106705539359146e-01, 9.456641399416906846e-02],
 [4.700000000000000289e-01, 5.242917784256559965e-01, 7.783940233236148754e-02],
 [4.799999999999999822e-01, 5.307204664723031984e-01, 6.188967930029153769e-02],
 [4.899999999999999911e-01, 5.371995335276968930e-01, 4.674532069970845083e-02],
 [5.000000000000000000e-01, 5.437317784256558983e-01, 3.243440233236150050e-02],
 [5.100000000000000089e-01, 5.503199999999999203e-01, 1.898499999999998800e-02],
 [5.200000000000000178e-01, 5.569669970845482210e-01, 6.425189504373148702e-03],
 [5.300000000000000266e-01, 5.636755685131195071e-01, -5.216953352769719554e-03],
 [5.400000000000000355e-01, 5.704485131195334846e-01, -1.591335276967931200e-02],
 [5.500000000000000444e-01, 5.772886297376094156e-01, -2.563593294460646960e-02],
 [5.600000000000000533e-01, 5.841987172011662288e-01, -3.435661807580180777e-02],
 [5.700000000000000622e-01, 5.911815743440234083e-01, -4.204733236151610848e-02],
 [5.799999999999999600e-01, 5.982399999999999940e-01, -4.867999999999997329e-02],
 [5.899999999999999689e-01, 6.053767930029154698e-01, -5.422654518950437152e-02],
 [5.999999999999999778e-01, 6.125947521865888756e-01, -5.865889212827987698e-02],
 [6.099999999999999867e-01, 6.198966763848395845e-01, -6.194896501457720916e-02],
 [6.199999999999999956e-01, 6.272853644314867472e-01, -6.406868804664718475e-02],
 [6.300000000000000044e-01, 6.347636151603498478e-01, -6.498998542274049550e-02],
 [6.400000000000000133e-01, 6.423342274052477041e-01, -6.468478134110783317e-02],
 [6.500000000000000222e-01, 6.500000000000001332e-01, -6.312499999999995892e-02],
 [6.600000000000000311e-01, 6.577637317784257309e-01, -6.028256559766762002e-02],
 [6.700000000000000400e-01, 6.656282215743440922e-01, -5.612940233236143883e-02],
 [6.800000000000000488e-01, 6.735962682215743680e-01, -5.063743440233228754e-02],
 [6.900000000000000577e-01, 6.816706705539359312e-01, -4.377858600583078852e-02],
 [7.000000000000000666e-01, 6.898542274052479328e-01, -3.552478134110773067e-02],
 [7.099999999999999645e-01, 6.981497376093294127e-01, -2.584794460641390290e-02],
 [7.199999999999999734e-01, 7.065599999999999659e-01, -1.471999999999998310e-02],
 [7.299999999999999822e-01, 7.150878134110787432e-01, -2.112871720116565877e-03],
 [7.399999999999999911e-01, 7.237359766763848956e-01, 1.200151603498558761e-02],
 [7.500000000000000000e-01, 7.325072886297376851e-01, 2.765123906705549417e-02],
 [7.600000000000000089e-01, 7.414045481049563735e-01, 4.486437317784272572e-02],
 [7.700000000000000178e-01, 7.504305539358600008e-01, 6.366899416909629905e-02],
 [7.800000000000000266e-01, 7.595881049562682730e-01, 8.409317784256584161e-02],
 [7.900000000000000355e-01, 7.688800000000000079e-01, 1.061650000000000926e-01],
 [8.000000000000000444e-01, 7.783090379008745785e-01, 1.299125364431487351e-01],
 [8.100000000000000533e-01, 7.878780174927114688e-01, 1.553638629737610910e-01],
 [8.200000000000000622e-01, 7.975897376093294966e-01, 1.825470553935860940e-01],
 [8.300000000000000711e-01, 8.074469970845481459e-01, 2.114901895043733160e-01],
 [8.399999999999999689e-01, 8.174525947521866787e-01, 2.422213411078720791e-01],
 [8.499999999999999778e-01, 8.276093294460642458e-01, 2.747685860058312057e-01],
 [8.599999999999999867e-01, 8.379199999999999982e-01, 3.091600000000003234e-01],
 [8.699999999999999956e-01, 8.483874052478134198e-01, 3.454236588921285600e-01],
 [8.800000000000000044e-01, 8.590143440233236616e-01, 3.835876384839654318e-01],
 [8.900000000000000133e-01, 8.698036151603498745e-01, 4.236800145772597892e-01],
 [9.000000000000000222e-01, 8.807580174927114314e-01, 4.657288629737614816e-01],
 [9.100000000000000311e-01, 8.918803498542275943e-01, 5.097622594752194702e-01],
 [9.200000000000000400e-01, 9.031734110787172920e-01, 5.558082798833825500e-01],
 [9.300000000000000488e-01, 9.146400000000001196e-01, 6.038950000000007368e-01],
 [9.400000000000000577e-01, 9.262829154518952279e-01, 6.540504956268228254e-01],
 [9.500000000000000666e-01, 9.381049562682217680e-01, 7.063028425655986098e-01],
 [9.599999999999999645e-01, 9.501089212827988906e-01, 7.606801166180757745e-01],
 [9.699999999999999734e-01, 9.622976093294459687e-01, 8.172103935860055568e-01],
 [9.799999999999999822e-01, 9.746738192419825975e-01, 8.759217492711370845e-01],
 [9.899999999999999911e-01, 9.872403498542273725e-01, 9.368422594752183752e-01],
 [1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00]]
mySurface = bspy.Spline(2, 3, [3, 4], [4, 5], [[0,0,0,.5,1,1,1], [0,0,0,0,.5,1,1,1,1]],
                     [[0, 0, 0, 0, 0, .3, .3, .3, .3, .3, .7, .7, .7, .7, .7, 1, 1, 1, 1, 1],
                      [0, .25, .5, .75, 1, 0, .25, .5, .75, 1, 0, .25, .5, .75, 1, 0, .25, .5, .75, 1],
                      [0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0]])
truthSurface = \
[[0.000000000000000000e+00, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [5.900000000000000383e-02, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [1.160000000000000198e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [1.710000000000000131e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [2.240000000000000324e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [2.750000000000000222e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [3.240000000000000657e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [3.709999999999999964e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [4.160000000000000364e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [4.589999999999999636e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [5.000000000000000000e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [5.410000000000000364e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [5.840000000000000746e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [6.290000000000000036e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [6.760000000000000453e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [7.249999999999999778e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [7.760000000000000231e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [8.290000000000001812e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [8.840000000000001190e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [9.410000000000000586e-01, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [1.000000000000000000e+00, 0.000000000000000000e+00, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 7.137500000000000788e-02, 0.000000000000000000e+00],
 [5.900000000000001077e-02, 7.137500000000000788e-02, 5.536500000000000449e-02],
 [1.160000000000000336e-01, 7.137500000000002176e-02, 1.074600000000000416e-01],
 [1.710000000000000409e-01, 7.137500000000000788e-02, 1.562850000000000072e-01],
 [2.240000000000000602e-01, 7.137500000000000788e-02, 2.018400000000000749e-01],
 [2.750000000000000777e-01, 7.137500000000000788e-02, 2.441250000000000087e-01],
 [3.240000000000000657e-01, 7.137500000000000788e-02, 2.831400000000000583e-01],
 [3.709999999999999409e-01, 7.137500000000000788e-02, 3.188850000000000851e-01],
 [4.160000000000000919e-01, 7.137500000000000788e-02, 3.513600000000000056e-01],
 [4.589999999999999636e-01, 7.137500000000000788e-02, 3.805650000000000976e-01],
 [5.000000000000001110e-01, 7.137500000000000788e-02, 4.065000000000000835e-01],
 [5.410000000000001474e-01, 7.137500000000000788e-02, 4.243050000000000987e-01],
 [5.840000000000000746e-01, 7.137500000000000788e-02, 4.291200000000000570e-01],
 [6.290000000000001146e-01, 7.137500000000000788e-02, 4.209450000000000691e-01],
 [6.760000000000001563e-01, 7.137500000000000788e-02, 3.997800000000000242e-01],
 [7.250000000000000888e-01, 7.137500000000000788e-02, 3.656249999999999778e-01],
 [7.760000000000001341e-01, 7.137500000000000788e-02, 3.184799999999999853e-01],
 [8.290000000000002922e-01, 7.137500000000000788e-02, 2.583449999999999358e-01],
 [8.840000000000002300e-01, 7.137500000000000788e-02, 1.852200000000000235e-01],
 [9.410000000000002807e-01, 7.137500000000000788e-02, 9.910499999999990151e-02],
 [1.000000000000000000e+00, 7.137500000000000788e-02, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 1.360000000000000653e-01, 0.000000000000000000e+00],
 [5.900000000000001771e-02, 1.360000000000000653e-01, 1.045200000000000434e-01],
 [1.160000000000000614e-01, 1.360000000000000930e-01, 2.020800000000001484e-01],
 [1.710000000000000964e-01, 1.360000000000000653e-01, 2.926800000000001067e-01],
 [2.240000000000000879e-01, 1.360000000000000653e-01, 3.763200000000001544e-01],
 [2.750000000000000777e-01, 1.360000000000000653e-01, 4.530000000000001248e-01],
 [3.240000000000001212e-01, 1.360000000000000653e-01, 5.227200000000002955e-01],
 [3.710000000000001630e-01, 1.360000000000000653e-01, 5.854800000000002225e-01],
 [4.160000000000001474e-01, 1.360000000000000653e-01, 6.412800000000002942e-01],
 [4.590000000000000746e-01, 1.360000000000000653e-01, 6.901200000000002888e-01],
 [5.000000000000001110e-01, 1.360000000000000653e-01, 7.320000000000003171e-01],
 [5.410000000000002585e-01, 1.360000000000000653e-01, 7.592400000000003590e-01],
 [5.840000000000002967e-01, 1.360000000000000653e-01, 7.641600000000002835e-01],
 [6.290000000000002256e-01, 1.360000000000000653e-01, 7.467600000000002014e-01],
 [6.760000000000003784e-01, 1.360000000000000653e-01, 7.070400000000001128e-01],
 [7.250000000000000888e-01, 1.360000000000000653e-01, 6.450000000000002398e-01],
 [7.760000000000003562e-01, 1.360000000000000653e-01, 5.606400000000000272e-01],
 [8.290000000000005143e-01, 1.360000000000000653e-01, 4.539600000000000302e-01],
 [8.840000000000003411e-01, 1.360000000000000653e-01, 3.249600000000000821e-01],
 [9.410000000000003917e-01, 1.360000000000000653e-01, 1.736399999999998500e-01],
 [1.000000000000000000e+00, 1.360000000000000653e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 1.946250000000000202e-01, 0.000000000000000000e+00],
 [5.900000000000000383e-02, 1.946250000000000202e-01, 1.475550000000000195e-01],
 [1.160000000000000198e-01, 1.946250000000000480e-01, 2.842200000000000837e-01],
 [1.710000000000000131e-01, 1.946250000000000202e-01, 4.099950000000000538e-01],
 [2.240000000000000602e-01, 1.946250000000000202e-01, 5.248800000000001242e-01],
 [2.750000000000000222e-01, 1.946250000000000202e-01, 6.288750000000000728e-01],
 [3.240000000000000657e-01, 1.946250000000000202e-01, 7.219800000000000662e-01],
 [3.709999999999999964e-01, 1.946250000000000202e-01, 8.041949999999999932e-01],
 [4.160000000000000364e-01, 1.946250000000000202e-01, 8.755200000000000760e-01],
 [4.589999999999999636e-01, 1.946250000000000202e-01, 9.359550000000000924e-01],
 [4.999999999999999445e-01, 1.946250000000000202e-01, 9.855000000000000426e-01],
 [5.409999999999999254e-01, 1.946250000000000202e-01, 1.015335000000000321e+00],
 [5.840000000000000746e-01, 1.946250000000000202e-01, 1.016639999999999988e+00],
 [6.290000000000000036e-01, 1.946250000000000202e-01, 9.894150000000000444e-01],
 [6.760000000000000453e-01, 1.946250000000000202e-01, 9.336599999999999344e-01],
 [7.249999999999999778e-01, 1.946250000000000202e-01, 8.493750000000001021e-01],
 [7.759999999999999121e-01, 1.946250000000000202e-01, 7.365599999999998815e-01],
 [8.290000000000001812e-01, 1.946250000000000202e-01, 5.952149999999998276e-01],
 [8.840000000000001190e-01, 1.946250000000000202e-01, 4.253399999999999959e-01],
 [9.409999999999999476e-01, 1.946250000000000202e-01, 2.269349999999997203e-01],
 [9.999999999999998890e-01, 1.946250000000000202e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 2.480000000000000537e-01, 0.000000000000000000e+00],
 [5.900000000000001077e-02, 2.480000000000000537e-01, 1.845600000000000573e-01],
 [1.160000000000000336e-01, 2.480000000000001092e-01, 3.542400000000001659e-01],
 [1.710000000000000131e-01, 2.480000000000000537e-01, 5.090400000000001590e-01],
 [2.240000000000000602e-01, 2.480000000000000537e-01, 6.489600000000002034e-01],
 [2.750000000000000777e-01, 2.480000000000000537e-01, 7.740000000000000213e-01],
 [3.240000000000001212e-01, 2.480000000000000537e-01, 8.841600000000001680e-01],
 [3.710000000000000520e-01, 2.480000000000000537e-01, 9.794400000000003104e-01],
 [4.160000000000000364e-01, 2.480000000000000537e-01, 1.059840000000000337e+00],
 [4.590000000000000746e-01, 2.480000000000000537e-01, 1.125360000000000138e+00],
 [5.000000000000000000e-01, 2.480000000000000537e-01, 1.176000000000000156e+00],
 [5.410000000000001474e-01, 2.480000000000000537e-01, 1.203120000000000411e+00],
 [5.840000000000000746e-01, 2.480000000000000537e-01, 1.198080000000000256e+00],
 [6.290000000000000036e-01, 2.480000000000000537e-01, 1.160880000000000356e+00],
 [6.760000000000002673e-01, 2.480000000000000537e-01, 1.091520000000000046e+00],
 [7.250000000000000888e-01, 2.480000000000000537e-01, 9.900000000000001021e-01],
 [7.760000000000001341e-01, 2.480000000000000537e-01, 8.563199999999998591e-01],
 [8.290000000000002922e-01, 2.480000000000000537e-01, 6.904799999999997606e-01],
 [8.840000000000002300e-01, 2.480000000000000537e-01, 4.924800000000000288e-01],
 [9.410000000000000586e-01, 2.480000000000000537e-01, 2.623199999999997756e-01],
 [1.000000000000000000e+00, 2.480000000000000537e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 2.968750000000000000e-01, 0.000000000000000000e+00],
 [5.899999999999999689e-02, 2.968750000000000000e-01, 2.156250000000000111e-01],
 [1.160000000000000059e-01, 2.968750000000000555e-01, 4.125000000000001443e-01],
 [1.710000000000000131e-01, 2.968750000000000000e-01, 5.906250000000000666e-01],
 [2.240000000000000324e-01, 2.968750000000000000e-01, 7.500000000000000000e-01],
 [2.750000000000000777e-01, 2.968750000000000000e-01, 8.906250000000000000e-01],
 [3.240000000000000657e-01, 2.968750000000000000e-01, 1.012499999999999956e+00],
 [3.709999999999999964e-01, 2.968750000000000000e-01, 1.115625000000000089e+00],
 [4.160000000000000364e-01, 2.968750000000000000e-01, 1.199999999999999956e+00],
 [4.589999999999999636e-01, 2.968750000000000000e-01, 1.265625000000000222e+00],
 [5.000000000000000000e-01, 2.968750000000000000e-01, 1.312500000000000000e+00],
 [5.410000000000000364e-01, 2.968750000000000000e-01, 1.333125000000000338e+00],
 [5.840000000000000746e-01, 2.968750000000000000e-01, 1.320000000000000062e+00],
 [6.290000000000001146e-01, 2.968750000000000000e-01, 1.273125000000000062e+00],
 [6.760000000000000453e-01, 2.968750000000000000e-01, 1.192499999999999893e+00],
 [7.250000000000000888e-01, 2.968750000000000000e-01, 1.078125000000000000e+00],
 [7.759999999999999121e-01, 2.968750000000000000e-01, 9.299999999999997158e-01],
 [8.290000000000001812e-01, 2.968750000000000000e-01, 7.481249999999997069e-01],
 [8.840000000000001190e-01, 2.968750000000000000e-01, 5.324999999999999734e-01],
 [9.409999999999999476e-01, 2.968750000000000000e-01, 2.831249999999996825e-01],
 [1.000000000000000000e+00, 2.968750000000000000e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 3.420000000000000262e-01, 0.000000000000000000e+00],
 [5.900000000000000383e-02, 3.420000000000000262e-01, 2.408400000000000263e-01],
 [1.160000000000000336e-01, 3.420000000000001372e-01, 4.593600000000001571e-01],
 [1.710000000000000131e-01, 3.420000000000000262e-01, 6.555600000000001426e-01],
 [2.240000000000000324e-01, 3.420000000000000262e-01, 8.294400000000001771e-01],
 [2.750000000000000222e-01, 3.420000000000000262e-01, 9.810000000000000941e-01],
 [3.240000000000000102e-01, 3.420000000000000262e-01, 1.110240000000000116e+00],
 [3.709999999999999964e-01, 3.420000000000000262e-01, 1.217160000000000020e+00],
 [4.160000000000000364e-01, 3.420000000000000262e-01, 1.301760000000000028e+00],
 [4.589999999999999636e-01, 3.420000000000000262e-01, 1.364040000000000141e+00],
 [5.000000000000000000e-01, 3.420000000000000262e-01, 1.403999999999999915e+00],
 [5.410000000000000364e-01, 3.420000000000000262e-01, 1.415880000000000249e+00],
 [5.840000000000000746e-01, 3.420000000000000262e-01, 1.393920000000000048e+00],
 [6.290000000000000036e-01, 3.420000000000000262e-01, 1.338120000000000198e+00],
 [6.760000000000000453e-01, 3.420000000000000262e-01, 1.248479999999999812e+00],
 [7.250000000000000888e-01, 3.420000000000000262e-01, 1.124999999999999778e+00],
 [7.760000000000000231e-01, 3.420000000000000262e-01, 9.676799999999997626e-01],
 [8.290000000000001812e-01, 3.420000000000000262e-01, 7.765199999999996550e-01],
 [8.840000000000001190e-01, 3.420000000000000262e-01, 5.515200000000000102e-01],
 [9.409999999999999476e-01, 3.420000000000000262e-01, 2.926799999999996627e-01],
 [1.000000000000000000e+00, 3.420000000000000262e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 3.841249999999999387e-01, 0.000000000000000000e+00],
 [5.899999999999999689e-02, 3.841249999999999387e-01, 2.602949999999999986e-01],
 [1.160000000000000198e-01, 3.841250000000000497e-01, 4.951800000000001201e-01],
 [1.709999999999999853e-01, 3.841249999999999387e-01, 7.046550000000000313e-01],
 [2.239999999999999769e-01, 3.841249999999999387e-01, 8.887200000000000655e-01],
 [2.749999999999999667e-01, 3.841249999999999387e-01, 1.047374999999999945e+00],
 [3.240000000000000657e-01, 3.841249999999999387e-01, 1.180620000000000003e+00],
 [3.709999999999999964e-01, 3.841249999999999387e-01, 1.288454999999999906e+00],
 [4.160000000000000364e-01, 3.841249999999999387e-01, 1.370879999999999876e+00],
 [4.589999999999999081e-01, 3.841249999999999387e-01, 1.427894999999999914e+00],
 [4.999999999999999445e-01, 3.841249999999999387e-01, 1.459499999999999797e+00],
 [5.409999999999999254e-01, 3.841249999999999387e-01, 1.461915000000000076e+00],
 [5.840000000000000746e-01, 3.841249999999999387e-01, 1.431359999999999744e+00],
 [6.289999999999998925e-01, 3.841249999999999387e-01, 1.367834999999999912e+00],
 [6.759999999999999343e-01, 3.841249999999999387e-01, 1.271339999999999693e+00],
 [7.249999999999999778e-01, 3.841249999999999387e-01, 1.141874999999999973e+00],
 [7.759999999999999121e-01, 3.841249999999999387e-01, 9.794399999999996442e-01],
 [8.290000000000001812e-01, 3.841249999999999387e-01, 7.840349999999995934e-01],
 [8.840000000000001190e-01, 3.841249999999999387e-01, 5.556599999999999318e-01],
 [9.409999999999998366e-01, 3.841249999999999387e-01, 2.943149999999996602e-01],
 [9.999999999999998890e-01, 3.841249999999999387e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 4.239999999999999880e-01, 0.000000000000000000e+00],
 [5.899999999999999689e-02, 4.239999999999999880e-01, 2.740799999999999348e-01],
 [1.159999999999999920e-01, 4.240000000000000990e-01, 5.203200000000001157e-01],
 [1.709999999999999853e-01, 4.239999999999999880e-01, 7.387200000000000433e-01],
 [2.240000000000000047e-01, 4.239999999999999880e-01, 9.292800000000001059e-01],
 [2.750000000000000222e-01, 4.239999999999999880e-01, 1.091999999999999860e+00],
 [3.240000000000000102e-01, 4.239999999999999880e-01, 1.226879999999999971e+00],
 [3.709999999999999964e-01, 4.239999999999999880e-01, 1.333919999999999773e+00],
 [4.159999999999999809e-01, 4.239999999999999880e-01, 1.413119999999999710e+00],
 [4.589999999999999636e-01, 4.239999999999999880e-01, 1.464480000000000004e+00],
 [4.999999999999999445e-01, 4.239999999999999880e-01, 1.487999999999999989e+00],
 [5.409999999999999254e-01, 4.239999999999999880e-01, 1.481759999999999966e+00],
 [5.840000000000000746e-01, 4.239999999999999880e-01, 1.443839999999999790e+00],
 [6.289999999999998925e-01, 4.239999999999999880e-01, 1.374239999999999906e+00],
 [6.760000000000000453e-01, 4.239999999999999880e-01, 1.272959999999999647e+00],
 [7.249999999999998668e-01, 4.239999999999999880e-01, 1.139999999999999680e+00],
 [7.760000000000000231e-01, 4.239999999999999880e-01, 9.753599999999997827e-01],
 [8.290000000000000702e-01, 4.239999999999999880e-01, 7.790399999999996217e-01],
 [8.840000000000000080e-01, 4.239999999999999880e-01, 5.510399999999998633e-01],
 [9.409999999999999476e-01, 4.239999999999999880e-01, 2.913599999999996193e-01],
 [9.999999999999998890e-01, 4.239999999999999880e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 4.623750000000000915e-01, 0.000000000000000000e+00],
 [5.900000000000002465e-02, 4.623750000000000915e-01, 2.822850000000000636e-01],
 [1.160000000000000475e-01, 4.623750000000002025e-01, 5.351400000000002821e-01],
 [1.710000000000000409e-01, 4.623750000000000915e-01, 7.585650000000002668e-01],
 [2.240000000000000879e-01, 4.623750000000000915e-01, 9.525600000000002954e-01],
 [2.750000000000000777e-01, 4.623750000000000915e-01, 1.117125000000000146e+00],
 [3.240000000000001767e-01, 4.623750000000000915e-01, 1.252260000000000151e+00],
 [3.710000000000000520e-01, 4.623750000000000915e-01, 1.357965000000000311e+00],
 [4.160000000000001474e-01, 4.623750000000000915e-01, 1.434240000000000403e+00],
 [4.590000000000000191e-01, 4.623750000000000915e-01, 1.481085000000000429e+00],
 [5.000000000000001110e-01, 4.623750000000000915e-01, 1.498500000000000387e+00],
 [5.410000000000001474e-01, 4.623750000000000915e-01, 1.485945000000000515e+00],
 [5.840000000000001856e-01, 4.623750000000000915e-01, 1.442880000000000384e+00],
 [6.290000000000002256e-01, 4.623750000000000915e-01, 1.369305000000000216e+00],
 [6.760000000000002673e-01, 4.623750000000000915e-01, 1.265220000000000011e+00],
 [7.250000000000000888e-01, 4.623750000000000915e-01, 1.130625000000000213e+00],
 [7.760000000000002451e-01, 4.623750000000000915e-01, 9.655200000000000449e-01],
 [8.290000000000004032e-01, 4.623750000000000915e-01, 7.699049999999998395e-01],
 [8.840000000000003411e-01, 4.623750000000000915e-01, 5.437800000000000411e-01],
 [9.410000000000002807e-01, 4.623750000000000915e-01, 2.871449999999997060e-01],
 [1.000000000000000000e+00, 4.623750000000000915e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 5.000000000000000000e-01, 0.000000000000000000e+00],
 [5.900000000000000383e-02, 5.000000000000000000e-01, 2.850000000000000311e-01],
 [1.160000000000000198e-01, 5.000000000000001110e-01, 5.400000000000001465e-01],
 [1.710000000000000131e-01, 5.000000000000000000e-01, 7.650000000000001243e-01],
 [2.240000000000000324e-01, 5.000000000000000000e-01, 9.600000000000001865e-01],
 [2.750000000000000222e-01, 5.000000000000000000e-01, 1.125000000000000000e+00],
 [3.240000000000000657e-01, 5.000000000000000000e-01, 1.259999999999999787e+00],
 [3.709999999999999964e-01, 5.000000000000000000e-01, 1.364999999999999991e+00],
 [4.160000000000000364e-01, 5.000000000000000000e-01, 1.439999999999999947e+00],
 [4.589999999999999636e-01, 5.000000000000000000e-01, 1.484999999999999876e+00],
 [5.000000000000000000e-01, 5.000000000000000000e-01, 1.500000000000000000e+00],
 [5.410000000000000364e-01, 5.000000000000000000e-01, 1.485000000000000098e+00],
 [5.840000000000000746e-01, 5.000000000000000000e-01, 1.439999999999999947e+00],
 [6.290000000000000036e-01, 5.000000000000000000e-01, 1.364999999999999991e+00],
 [6.760000000000000453e-01, 5.000000000000000000e-01, 1.259999999999999787e+00],
 [7.249999999999999778e-01, 5.000000000000000000e-01, 1.125000000000000000e+00],
 [7.760000000000000231e-01, 5.000000000000000000e-01, 9.599999999999998535e-01],
 [8.290000000000001812e-01, 5.000000000000000000e-01, 7.649999999999996803e-01],
 [8.840000000000001190e-01, 5.000000000000000000e-01, 5.400000000000000355e-01],
 [9.410000000000000586e-01, 5.000000000000000000e-01, 2.849999999999996425e-01],
 [1.000000000000000000e+00, 5.000000000000000000e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 5.376250000000001306e-01, 0.000000000000000000e+00],
 [5.900000000000001077e-02, 5.376250000000001306e-01, 2.822850000000000081e-01],
 [1.160000000000000198e-01, 5.376250000000001306e-01, 5.351400000000001711e-01],
 [1.710000000000000131e-01, 5.376250000000001306e-01, 7.585650000000000448e-01],
 [2.240000000000000324e-01, 5.376250000000001306e-01, 9.525600000000001844e-01],
 [2.750000000000000777e-01, 5.376250000000001306e-01, 1.117125000000000146e+00],
 [3.240000000000000657e-01, 5.376250000000001306e-01, 1.252259999999999929e+00],
 [3.709999999999999964e-01, 5.376250000000001306e-01, 1.357965000000000089e+00],
 [4.160000000000000919e-01, 5.376250000000001306e-01, 1.434239999999999959e+00],
 [4.589999999999999636e-01, 5.376250000000001306e-01, 1.481085000000000207e+00],
 [5.000000000000000000e-01, 5.376250000000001306e-01, 1.498499999999999943e+00],
 [5.410000000000000364e-01, 5.376250000000001306e-01, 1.485945000000000071e+00],
 [5.840000000000000746e-01, 5.376250000000001306e-01, 1.442880000000000162e+00],
 [6.290000000000000036e-01, 5.376250000000001306e-01, 1.369305000000000216e+00],
 [6.760000000000000453e-01, 5.376250000000001306e-01, 1.265219999999999789e+00],
 [7.249999999999999778e-01, 5.376250000000001306e-01, 1.130624999999999991e+00],
 [7.760000000000001341e-01, 5.376250000000001306e-01, 9.655199999999998228e-01],
 [8.290000000000001812e-01, 5.376250000000001306e-01, 7.699049999999997285e-01],
 [8.840000000000002300e-01, 5.376250000000001306e-01, 5.437800000000000411e-01],
 [9.409999999999999476e-01, 5.376250000000001306e-01, 2.871449999999996505e-01],
 [1.000000000000000000e+00, 5.376250000000001306e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 5.760000000000000675e-01, 0.000000000000000000e+00],
 [5.900000000000000383e-02, 5.760000000000000675e-01, 2.740799999999999903e-01],
 [1.160000000000000059e-01, 5.760000000000001785e-01, 5.203200000000001157e-01],
 [1.710000000000000131e-01, 5.760000000000000675e-01, 7.387200000000000433e-01],
 [2.240000000000000602e-01, 5.760000000000000675e-01, 9.292800000000001059e-01],
 [2.750000000000000222e-01, 5.760000000000000675e-01, 1.091999999999999860e+00],
 [3.240000000000000102e-01, 5.760000000000000675e-01, 1.226879999999999971e+00],
 [3.710000000000000520e-01, 5.760000000000000675e-01, 1.333919999999999995e+00],
 [4.160000000000000364e-01, 5.760000000000000675e-01, 1.413119999999999932e+00],
 [4.589999999999999636e-01, 5.760000000000000675e-01, 1.464480000000000004e+00],
 [5.000000000000000000e-01, 5.760000000000000675e-01, 1.487999999999999989e+00],
 [5.410000000000000364e-01, 5.760000000000000675e-01, 1.481760000000000188e+00],
 [5.840000000000000746e-01, 5.760000000000000675e-01, 1.443840000000000012e+00],
 [6.290000000000001146e-01, 5.760000000000000675e-01, 1.374240000000000128e+00],
 [6.760000000000000453e-01, 5.760000000000000675e-01, 1.272959999999999869e+00],
 [7.250000000000000888e-01, 5.760000000000000675e-01, 1.140000000000000124e+00],
 [7.760000000000000231e-01, 5.760000000000000675e-01, 9.753599999999998937e-01],
 [8.290000000000001812e-01, 5.760000000000000675e-01, 7.790399999999997327e-01],
 [8.840000000000001190e-01, 5.760000000000000675e-01, 5.510399999999999743e-01],
 [9.410000000000000586e-01, 5.760000000000000675e-01, 2.913599999999996193e-01],
 [1.000000000000000000e+00, 5.760000000000000675e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 6.158750000000000613e-01, 0.000000000000000000e+00],
 [5.899999999999999689e-02, 6.158750000000000613e-01, 2.602949999999999986e-01],
 [1.160000000000000198e-01, 6.158750000000001723e-01, 4.951800000000001201e-01],
 [1.710000000000000131e-01, 6.158750000000000613e-01, 7.046550000000000313e-01],
 [2.240000000000000324e-01, 6.158750000000000613e-01, 8.887200000000001765e-01],
 [2.750000000000000222e-01, 6.158750000000000613e-01, 1.047374999999999945e+00],
 [3.240000000000000657e-01, 6.158750000000000613e-01, 1.180620000000000003e+00],
 [3.709999999999999409e-01, 6.158750000000000613e-01, 1.288454999999999906e+00],
 [4.160000000000000364e-01, 6.158750000000000613e-01, 1.370879999999999876e+00],
 [4.589999999999999636e-01, 6.158750000000000613e-01, 1.427895000000000136e+00],
 [5.000000000000000000e-01, 6.158750000000000613e-01, 1.459500000000000020e+00],
 [5.410000000000000364e-01, 6.158750000000000613e-01, 1.461915000000000076e+00],
 [5.840000000000000746e-01, 6.158750000000000613e-01, 1.431359999999999966e+00],
 [6.290000000000000036e-01, 6.158750000000000613e-01, 1.367834999999999912e+00],
 [6.760000000000000453e-01, 6.158750000000000613e-01, 1.271339999999999915e+00],
 [7.249999999999999778e-01, 6.158750000000000613e-01, 1.141874999999999973e+00],
 [7.759999999999999121e-01, 6.158750000000000613e-01, 9.794399999999998663e-01],
 [8.290000000000001812e-01, 6.158750000000000613e-01, 7.840349999999995934e-01],
 [8.840000000000001190e-01, 6.158750000000000613e-01, 5.556599999999999318e-01],
 [9.409999999999999476e-01, 6.158750000000000613e-01, 2.943149999999996602e-01],
 [1.000000000000000000e+00, 6.158750000000000613e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 6.580000000000000293e-01, 0.000000000000000000e+00],
 [5.899999999999999689e-02, 6.580000000000000293e-01, 2.408399999999999430e-01],
 [1.160000000000000198e-01, 6.580000000000001403e-01, 4.593599999999999905e-01],
 [1.709999999999999853e-01, 6.580000000000000293e-01, 6.555599999999999206e-01],
 [2.240000000000000324e-01, 6.580000000000000293e-01, 8.294399999999999551e-01],
 [2.749999999999999667e-01, 6.580000000000000293e-01, 9.809999999999998721e-01],
 [3.240000000000000657e-01, 6.580000000000000293e-01, 1.110239999999999672e+00],
 [3.709999999999999409e-01, 6.580000000000000293e-01, 1.217159999999999798e+00],
 [4.159999999999999809e-01, 6.580000000000000293e-01, 1.301759999999999806e+00],
 [4.589999999999999081e-01, 6.580000000000000293e-01, 1.364039999999999697e+00],
 [4.999999999999999445e-01, 6.580000000000000293e-01, 1.403999999999999915e+00],
 [5.409999999999999254e-01, 6.580000000000000293e-01, 1.415879999999999805e+00],
 [5.840000000000000746e-01, 6.580000000000000293e-01, 1.393919999999999826e+00],
 [6.290000000000000036e-01, 6.580000000000000293e-01, 1.338119999999999754e+00],
 [6.760000000000000453e-01, 6.580000000000000293e-01, 1.248479999999999590e+00],
 [7.249999999999998668e-01, 6.580000000000000293e-01, 1.125000000000000000e+00],
 [7.759999999999999121e-01, 6.580000000000000293e-01, 9.676799999999996515e-01],
 [8.290000000000001812e-01, 6.580000000000000293e-01, 7.765199999999995439e-01],
 [8.840000000000000080e-01, 6.580000000000000293e-01, 5.515199999999998992e-01],
 [9.409999999999999476e-01, 6.580000000000000293e-01, 2.926799999999996071e-01],
 [9.999999999999998890e-01, 6.580000000000000293e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 7.031250000000000000e-01, 0.000000000000000000e+00],
 [5.900000000000000383e-02, 7.031250000000000000e-01, 2.156250000000000111e-01],
 [1.160000000000000059e-01, 7.031250000000001110e-01, 4.125000000000000888e-01],
 [1.710000000000000131e-01, 7.031250000000000000e-01, 5.906250000000000666e-01],
 [2.240000000000000047e-01, 7.031250000000000000e-01, 7.500000000000001110e-01],
 [2.750000000000000222e-01, 7.031250000000000000e-01, 8.906250000000000000e-01],
 [3.240000000000000657e-01, 7.031250000000000000e-01, 1.012499999999999956e+00],
 [3.709999999999999964e-01, 7.031250000000000000e-01, 1.115625000000000089e+00],
 [4.160000000000000364e-01, 7.031250000000000000e-01, 1.199999999999999956e+00],
 [4.590000000000000191e-01, 7.031250000000000000e-01, 1.265625000000000000e+00],
 [5.000000000000000000e-01, 7.031250000000000000e-01, 1.312500000000000000e+00],
 [5.410000000000000364e-01, 7.031250000000000000e-01, 1.333125000000000115e+00],
 [5.840000000000000746e-01, 7.031250000000000000e-01, 1.320000000000000062e+00],
 [6.290000000000000036e-01, 7.031250000000000000e-01, 1.273125000000000062e+00],
 [6.760000000000000453e-01, 7.031250000000000000e-01, 1.192499999999999893e+00],
 [7.249999999999999778e-01, 7.031250000000000000e-01, 1.078125000000000000e+00],
 [7.760000000000000231e-01, 7.031250000000000000e-01, 9.299999999999997158e-01],
 [8.290000000000001812e-01, 7.031250000000000000e-01, 7.481249999999997069e-01],
 [8.840000000000001190e-01, 7.031250000000000000e-01, 5.324999999999999734e-01],
 [9.410000000000000586e-01, 7.031250000000000000e-01, 2.831249999999996270e-01],
 [1.000000000000000000e+00, 7.031250000000000000e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 7.520000000000000018e-01, 0.000000000000000000e+00],
 [5.900000000000000383e-02, 7.520000000000001128e-01, 1.845599999999999741e-01],
 [1.160000000000000198e-01, 7.520000000000002238e-01, 3.542399999999999993e-01],
 [1.710000000000000131e-01, 7.520000000000000018e-01, 5.090399999999999370e-01],
 [2.240000000000000324e-01, 7.520000000000001128e-01, 6.489599999999999813e-01],
 [2.750000000000000222e-01, 7.520000000000000018e-01, 7.739999999999999103e-01],
 [3.240000000000000657e-01, 7.520000000000000018e-01, 8.841599999999998349e-01],
 [3.709999999999999964e-01, 7.520000000000000018e-01, 9.794399999999998663e-01],
 [4.160000000000000364e-01, 7.520000000000000018e-01, 1.059839999999999893e+00],
 [4.589999999999999636e-01, 7.520000000000001128e-01, 1.125359999999999916e+00],
 [5.000000000000000000e-01, 7.520000000000000018e-01, 1.175999999999999712e+00],
 [5.410000000000000364e-01, 7.520000000000001128e-01, 1.203119999999999967e+00],
 [5.840000000000000746e-01, 7.520000000000000018e-01, 1.198080000000000034e+00],
 [6.290000000000000036e-01, 7.520000000000000018e-01, 1.160879999999999690e+00],
 [6.760000000000000453e-01, 7.520000000000000018e-01, 1.091519999999999602e+00],
 [7.249999999999999778e-01, 7.520000000000000018e-01, 9.899999999999998801e-01],
 [7.760000000000000231e-01, 7.520000000000000018e-01, 8.563199999999997480e-01],
 [8.290000000000001812e-01, 7.520000000000000018e-01, 6.904799999999996496e-01],
 [8.840000000000001190e-01, 7.520000000000001128e-01, 4.924799999999999178e-01],
 [9.410000000000000586e-01, 7.520000000000000018e-01, 2.623199999999996646e-01],
 [1.000000000000000000e+00, 7.520000000000000018e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 8.053750000000001741e-01, 0.000000000000000000e+00],
 [5.899999999999999689e-02, 8.053750000000001741e-01, 1.475549999999999362e-01],
 [1.160000000000000198e-01, 8.053750000000001741e-01, 2.842199999999999727e-01],
 [1.710000000000000131e-01, 8.053750000000001741e-01, 4.099949999999998873e-01],
 [2.240000000000000324e-01, 8.053750000000001741e-01, 5.248799999999999022e-01],
 [2.750000000000000222e-01, 8.053750000000001741e-01, 6.288749999999997398e-01],
 [3.240000000000000657e-01, 8.053750000000001741e-01, 7.219799999999997331e-01],
 [3.709999999999999964e-01, 8.053750000000001741e-01, 8.041949999999997711e-01],
 [4.160000000000000364e-01, 8.053750000000001741e-01, 8.755199999999997429e-01],
 [4.590000000000000191e-01, 8.053750000000001741e-01, 9.359549999999996484e-01],
 [5.000000000000000000e-01, 8.053750000000001741e-01, 9.854999999999997096e-01],
 [5.410000000000000364e-01, 8.053750000000001741e-01, 1.015334999999999877e+00],
 [5.840000000000000746e-01, 8.053750000000001741e-01, 1.016639999999999766e+00],
 [6.290000000000000036e-01, 8.053750000000001741e-01, 9.894149999999997114e-01],
 [6.760000000000001563e-01, 8.053750000000001741e-01, 9.336599999999996013e-01],
 [7.249999999999999778e-01, 8.053750000000001741e-01, 8.493749999999997691e-01],
 [7.760000000000000231e-01, 8.053750000000001741e-01, 7.365599999999996594e-01],
 [8.290000000000001812e-01, 8.053750000000001741e-01, 5.952149999999996055e-01],
 [8.840000000000001190e-01, 8.053750000000001741e-01, 4.253399999999998293e-01],
 [9.410000000000000586e-01, 8.053750000000001741e-01, 2.269349999999996648e-01],
 [1.000000000000000000e+00, 8.053750000000001741e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 8.640000000000001013e-01, 0.000000000000000000e+00],
 [5.900000000000001077e-02, 8.640000000000001013e-01, 1.045199999999999879e-01],
 [1.160000000000000198e-01, 8.640000000000003233e-01, 2.020800000000000374e-01],
 [1.710000000000000409e-01, 8.640000000000001013e-01, 2.926799999999999957e-01],
 [2.240000000000000324e-01, 8.640000000000001013e-01, 3.763199999999999878e-01],
 [2.750000000000000222e-01, 8.640000000000001013e-01, 4.529999999999999583e-01],
 [3.240000000000000657e-01, 8.640000000000001013e-01, 5.227199999999999624e-01],
 [3.709999999999999964e-01, 8.640000000000001013e-01, 5.854800000000000004e-01],
 [4.160000000000000364e-01, 8.640000000000001013e-01, 6.412799999999999612e-01],
 [4.590000000000000191e-01, 8.640000000000001013e-01, 6.901199999999999557e-01],
 [5.000000000000000000e-01, 8.640000000000001013e-01, 7.319999999999999840e-01],
 [5.410000000000001474e-01, 8.640000000000001013e-01, 7.592400000000000260e-01],
 [5.840000000000000746e-01, 8.640000000000001013e-01, 7.641599999999999504e-01],
 [6.290000000000000036e-01, 8.640000000000001013e-01, 7.467599999999999794e-01],
 [6.760000000000001563e-01, 8.640000000000001013e-01, 7.070399999999998908e-01],
 [7.250000000000000888e-01, 8.640000000000001013e-01, 6.450000000000000178e-01],
 [7.760000000000001341e-01, 8.640000000000001013e-01, 5.606399999999999162e-01],
 [8.290000000000001812e-01, 8.640000000000001013e-01, 4.539599999999998081e-01],
 [8.840000000000002300e-01, 8.640000000000001013e-01, 3.249599999999999711e-01],
 [9.410000000000001696e-01, 8.640000000000001013e-01, 1.736399999999997945e-01],
 [1.000000000000000000e+00, 8.640000000000001013e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 9.286250000000000338e-01, 0.000000000000000000e+00],
 [5.900000000000000383e-02, 9.286250000000000338e-01, 5.536499999999992816e-02],
 [1.160000000000000198e-01, 9.286250000000002558e-01, 1.074599999999998889e-01],
 [1.710000000000000131e-01, 9.286250000000000338e-01, 1.562849999999998130e-01],
 [2.240000000000000324e-01, 9.286250000000000338e-01, 2.018399999999997696e-01],
 [2.750000000000000222e-01, 9.286250000000000338e-01, 2.441249999999996756e-01],
 [3.240000000000000657e-01, 9.286250000000000338e-01, 2.831399999999996697e-01],
 [3.709999999999999964e-01, 9.286250000000000338e-01, 3.188849999999996410e-01],
 [4.160000000000000364e-01, 9.286250000000000338e-01, 3.513599999999995616e-01],
 [4.589999999999999636e-01, 9.286250000000000338e-01, 3.805649999999995425e-01],
 [5.000000000000000000e-01, 9.286250000000000338e-01, 4.064999999999994729e-01],
 [5.410000000000000364e-01, 9.286250000000000338e-01, 4.243049999999995436e-01],
 [5.840000000000000746e-01, 9.286250000000000338e-01, 4.291199999999995018e-01],
 [6.290000000000000036e-01, 9.286250000000000338e-01, 4.209449999999994585e-01],
 [6.760000000000000453e-01, 9.286250000000000338e-01, 3.997799999999994691e-01],
 [7.249999999999999778e-01, 9.286250000000000338e-01, 3.656249999999995337e-01],
 [7.760000000000000231e-01, 9.286250000000000338e-01, 3.184799999999995412e-01],
 [8.290000000000001812e-01, 9.286250000000000338e-01, 2.583449999999996027e-01],
 [8.840000000000001190e-01, 9.286250000000000338e-01, 1.852199999999997460e-01],
 [9.410000000000000586e-01, 9.286250000000000338e-01, 9.910499999999976273e-02],
 [1.000000000000000000e+00, 9.286250000000000338e-01, 0.000000000000000000e+00],
 [0.000000000000000000e+00, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [5.900000000000000383e-02, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [1.160000000000000198e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [1.710000000000000131e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [2.240000000000000324e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [2.750000000000000222e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [3.240000000000000657e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [3.709999999999999964e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [4.160000000000000364e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [4.589999999999999636e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [5.000000000000000000e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [5.410000000000000364e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [5.840000000000000746e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [6.290000000000000036e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [6.760000000000000453e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [7.249999999999999778e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [7.760000000000000231e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [8.290000000000001812e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [8.840000000000001190e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [9.410000000000000586e-01, 1.000000000000000000e+00, 0.000000000000000000e+00],
 [1.000000000000000000e+00, 1.000000000000000000e+00, 0.000000000000000000e+00]]

def test_add():
    maxError = 0.0
    spline1 = bspy.Spline(1, 2, (5,), (5,), [np.array([0, 0, 0, 0, 0.2, 0.5, 0.5, 1, 1, 1], float)], 
        np.array(((100, 260), (260, 100), (580, 260), (260, 420), (420, 100)), float))
    spline2 = bspy.Spline(1, 2, (4,), (6,), [np.array([0, 0, 0, 0.2, 0.3, 0.4, 0.5, 0.5, 1, 1], float)], 
        np.array(((260, 100), (100, 260), (260, 420), (420, 420), (580, 260), (420, 100)), float))
    
    # Add with shared independent variable.
    added = spline1 + spline2
    maxError = 0.0
    for u in np.linspace(spline1.knots[0][spline1.order[0]-1], spline1.knots[0][spline1.nCoef[0]], 100):
        [x, y] = spline1.evaluate([u]) + spline2.evaluate([u])
        [xTest, yTest] = added.evaluate([u])
        maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError <= np.finfo(float).eps

    # Add with completely independent variables.
    added = spline1.add(spline2)
    maxError = 0.0
    for u in np.linspace(spline1.knots[0][spline1.order[0]-1], spline1.knots[0][spline1.nCoef[0]], 21):
        for v in np.linspace(spline2.knots[0][spline2.order[0]-1], spline2.knots[0][spline2.nCoef[0]], 21):
            [x, y] = spline1.evaluate([u]) + spline2.evaluate([v])
            [xTest, yTest] = added.evaluate([u,v])
            maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError <= np.finfo(float).eps

def test_blossom():
    maxError = 0.0
    for [u, x, y] in truthCurve:
        [xTest, yTest] = myCurve.blossom([(myCurve.order[0] - 1) * [u]])
        maxError = max(maxError, np.sqrt((xTest - x) ** 2 + (yTest - y) ** 2))
    assert maxError <= np.finfo(float).eps
    for i in range(myCurve.nCoef[0]):
        coef = myCurve.blossom([myCurve.knots[0][i+1:i+myCurve.order[0]]])
        maxError = max(maxError, np.linalg.norm(myCurve.coefs[:,i] - coef))
    assert maxError <= np.finfo(float).eps

def test_circular_arc():
    maxError = 0.0
    radius = 3.0
    angle = 360
    tolerance = 1.0e-8
    spline = bspy.Spline.circular_arc(radius, angle, tolerance)
    for t in np.linspace(0.0, 1.0, 65):
        maxError = max(maxError, np.abs(np.linalg.norm(spline(t)) - radius))
    assert maxError < tolerance

def test_contours():
    maxError = 0.0
    F = lambda x: (x[0] - x[2], x[1] - x[3], x[0]*x[0] + x[1]*x[1]/9.0 - 1.0 + x[2]*x[2] + x[3]*x[3]/9.0 - 1.0)
    spline = bspy.Spline.contour(F, ((1.0, 0.0, 1.0, 0.0), (0.0, 3.0, 0.0, 3.0)))
    for t in np.linspace(0.0, 1.0, 21):
        x = spline((t,))
        maxError = max(maxError, np.linalg.norm(F(x)))
    assert maxError <= 0.055

    maxError = 0.0
    order = 3
    knots = [0.0] * order + [1.0] * order
    nCoef = len(knots) - order
    spline = bspy.Spline(2, 1, (order, order), (nCoef, nCoef), (knots, knots), \
        (((1.0, 0.0, 1.0), (0.0, -5.0, 0.0), (1.0, 0.0, 1.0)),))
    contours = spline.contours()
    for contour in contours:
        for t in np.linspace(0.0, 1.0, 11):
            uvw = contour((t,))
            maxError = max(maxError, np.linalg.norm(spline(uvw)))
    assert maxError <= 0.055

    return # Comment this line to run the following lengthy test

    maxError = 0.0
    F = lambda u , v : (u ** 2 + (v - 3/4) ** 2 - 1/25) * \
        ((u - 2/5) ** 2 + (v - 3/5) ** 2 - 1/25) * \
        (u ** 2 + (v - 3/2) ** 2 - 25/16) * \
        ((u - 1) ** 2 + (v - 3/10) ** 2 - 1/25)
    order = 9
    knots = [0.0] * order + [1.0] * order
    nCoef = order
    points = []
    for u in np.linspace(0.0, 1.0, nCoef):
        for v in np.linspace(0.0, 1.0, nCoef):
            points.append((u, v, F(u, v)))
    spline = bspy.Spline.least_squares(2, 1, (order, order), points, (knots, knots))
    contours = spline.contours()
    for contour in contours:
        for t in np.linspace(0.0, 1.0, 11):
            uvw = contour((t,))
            maxError = max(maxError, np.linalg.norm(spline(uvw)))
    assert maxError <= 0.05

def test_contract():
    maxError = 0.0
    contracted = mySurface.contract([.25, None])
    for u in np.linspace(0, 1, 21):
        xyz = mySurface([.25, u]) - contracted([u])
        maxError = max(maxError, np.sqrt(xyz @ xyz))
    assert maxError <= 2.5 * np.finfo(float).eps

    maxError = 0.0
    contracted = mySurface.contract([None, .75])
    for u in np.linspace(0, 1, 21):
        xyz = mySurface([u, .75]) - contracted([u])
        maxError = max(maxError, np.sqrt(xyz @ xyz))
    assert maxError <= 2.5 * np.finfo(float).eps

def test_convolve():
    maxError = 0.0
    #spline1 = bspy.Spline(1, 1, (2,), (3,), ((-1.0, -1.0, 0.0, 1.0, 1.0),), (1.0, 0.0, 1.0))
    spline1 = bspy.Spline(1, 1, (5,), (8,), ((-1.1, -1.1, -1.1, -1.1, -1.1, -0.3, 0.0, 0.7, 2.0, 2.0, 2.0, 2.0, 2.0),), (1.0, 1.5, -0.5, 0.0, -1.0, 2.0, 0.5, 3.0))
    spline2 = bspy.Spline(1, 1, (4,), (7,), ((-1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0),), (0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))
    
    # Convolve with shared independent variable.
    convolution = spline1.convolve(spline2, [[0, 0]])
    maxError = 0.0
    for u in np.linspace(convolution.knots[0][convolution.order[0]-1], convolution.knots[0][convolution.nCoef[0]], 21):
        x = scipy.integrate.quad(lambda s: spline1([u - s])[0] * spline2([s]), \
            max(u - spline1.knots[0][spline1.nCoef[0]], spline2.knots[0][spline2.order[0]-1]), 
            min(u - spline1.knots[0][spline1.order[0]-1], spline2.knots[0][spline2.nCoef[0]]))[0]
        xTest = convolution.evaluate([u])
        maxError = max(maxError, (xTest - x) ** 2)
    assert maxError <= np.finfo(float).eps
    
def test_cross():
    # Test with constant vector
    maxError = 0.0
    vector = np.array([1.0, 2.0, 3.0])
    crossSurface = mySurface.cross(vector)
    for v in np.linspace(0, 1, 21):
        for u in np.linspace(0, 1, 21):
            xyz1 = np.cross(mySurface([u, v]), vector) 
            xyz = xyz1 - crossSurface([u , v])
            maxError = max(maxError, np.sqrt(xyz @ xyz))
    assert maxError <= np.sqrt(np.finfo(float).eps)

    # Test with spline
    maxError = 0.0
    crossSurface = mySurface.cross(mySurface)
    for v in np.linspace(0, 1, 5):
        for u in np.linspace(0, 1, 5):
            xyz1 = np.cross(mySurface([u, v]), mySurface([u, v])) 
            xyz = xyz1 - crossSurface([u , v])
            maxError = max(maxError, np.sqrt(xyz @ xyz))
    assert maxError <= np.sqrt(np.finfo(float).eps)

def test_curvature():
    testCurve = bspy.Spline.section([[1.0, 0.0, 90.0, 1.0], [0.0, 1.0, 180.0, 2.0]])
    assert abs(testCurve.curvature(0.0) - 1.0) < 2.0e-15
    assert abs(testCurve.curvature(1.0) - 2.0) < 2.0e-15
    testCurve = testCurve @ [0, 1]
    testVals = [testCurve.curvature(u) for u in np.linspace(0.0, 1.0, 101)]
    return

def test_derivative():
    maxError = 0.0
    myDerivative = myCurve.differentiate()
    for [u, x, y] in truthCurve:
        [xTest, yTest] = myCurve.derivative([1], u)
        [x, y] = myDerivative.evaluate(u)
        maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError <= np.finfo(float).eps

def test_dot():
    maxError = 0.0
    dottedCurve = myCurve.dot([2.0, 3.0])
    for [u, x, y] in truthCurve:
        valueTest = dottedCurve.evaluate([u])
        maxError = max(maxError, (valueTest - 2.0 * x - 3.0 * y) ** 2)
    assert maxError <= np.finfo(float).eps

def test_elevate():
    maxError = 0.0
    original = bspy.Spline(1, 2, (4,), (6,), [np.array([0, 0, 0, 0, 0.5, 0.5, 1, 1, 1, 1], float)], 
        np.array(((260, 100), (100, 260), (260, 420), (420, 420), (580, 260), (420, 100)), float))
    elevated = original.elevate((1,))
    maxError = 0.0
    for u in np.linspace(original.knots[0][original.order[0]-1], original.knots[0][original.nCoef[0]], 100):
        [x, y] = original.evaluate([u])
        [xTest, yTest] = elevated.evaluate([u])
        maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError <= np.finfo(float).eps

def test_elevate_and_insert_knots():
    maxError = 0.0
    original = bspy.Spline(1, 2, (4,), (6,), [np.array([0, 0, 0, 0, 0.5, 0.5, 1, 1, 1, 1], float)], 
        np.array(((260, 100), (100, 260), (260, 420), (420, 420), (580, 260), (420, 100)), float))
    elevated = original.elevate_and_insert_knots((1,), ((.5,.3, .6, .6),))
    maxError = 0.0
    for u in np.linspace(original.knots[0][original.order[0]-1], original.knots[0][original.nCoef[0]], 100):
        [x, y] = original.evaluate([u])
        [xTest, yTest] = elevated.evaluate([u])
        maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError < np.finfo(float).eps

def test_evaluate():
    maxError = 0.0
    for [u, x, y] in truthCurve:
        [xTest, yTest] = myCurve.evaluate([u])
        maxError = max(maxError, np.sqrt((xTest - x) ** 2 + (yTest - y) ** 2))
    assert maxError <= np.finfo(float).eps
    maxError = 0.0
    i = 0
    for v in np.linspace(0, 1, 21):
        for u in np.linspace(0, 1, 21):
            xyz1 = mySurface([u, v])
            xyz = xyz1 - np.array(truthSurface[i])
            maxError = max(maxError, np.sqrt(xyz @ xyz))
            i += 1
    assert maxError <= 2.5 * np.finfo(float).eps

def test_extrapolate():
    maxError = 0.0
    spline = bspy.Spline(1, 2, (4,), (6,), [np.array([0, 0, 0, 0.2, 0.3, 0.4, 0.5, 0.5, 1, 1], float)], 
        np.array(((260, 100), (100, 260), (260, 420), (420, 420), (580, 260), (420, 100)), float))
    #spline = bspy.Spline(1, 2, (4,), (5,), [np.array([0, 0, 0.2, 0.2, 0.5, 0.8, 0.8, 1, 1], float)], 
    #    np.array(((260, 100), (100, 260), (300, 300), (100, 260), (260, 100)), float))
    extrapolated = spline.extrapolate([[-0.5, 1.5]], 2)
    maxError = 0.0
    for u in np.linspace(spline.knots[0][spline.order[0]-1], spline.knots[0][spline.nCoef[0]], 3):
        for i in range(0, 3):
            [x, y] = spline.derivative([i],[u])
            [xTest, yTest] = extrapolated.derivative([i],[u - np.finfo(float).eps])
            maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
            assert maxError <= np.finfo(float).eps

def test_fold_unfold():
    nInd = 3
    nDep = 3
    order = (2, 3, 4)
    nCoef = (4, 5, 6)
    knots = [np.linspace(0.0, 1.0, order[k] + nCoef[k]) for k in range(nInd)]
    coefs = np.empty((nDep, *nCoef))
    for i in range(coefs.shape[0]):
        for j in range(coefs.shape[1]):
            for k in range(coefs.shape[2]):
                for l in range(coefs.shape[3]):
                    coefs[i,j,k,l] = i + 0.1*j + 0.01*k + 0.001*l
    spline = bspy.Spline(nInd, nDep, order, nCoef, knots, coefs)
    
    folded, coefficientless = spline.fold([0, 2])

    assert folded.nInd == 1
    assert folded.nDep == 72
    assert folded.order == (3,)
    assert folded.nCoef == (5,)
    assert (folded.knots[0] == spline.knots[1]).all()
    assert folded.coefs.shape == (72, 5)

    assert coefficientless.nInd == 2
    assert coefficientless.nDep == 0
    assert coefficientless.order == (2, 4)
    assert coefficientless.nCoef == (4, 6)
    assert (coefficientless.knots[0] == spline.knots[0]).all()
    assert (coefficientless.knots[1] == spline.knots[2]).all()

    unfolded = folded.unfold([0, 2], coefficientless)

    assert unfolded.nInd == spline.nInd
    assert unfolded.nDep == spline.nDep
    assert unfolded.order == spline.order
    assert unfolded.nCoef == spline.nCoef
    assert (unfolded.knots[0] == spline.knots[0]).all()
    assert (unfolded.knots[1] == spline.knots[1]).all()
    assert (unfolded.knots[2] == spline.knots[2]).all()
    assert unfolded.coefs.shape == spline.coefs.shape

    maxError = 0.0
    for i in range(coefs.shape[0]):
        for j in range(coefs.shape[1]):
            for k in range(coefs.shape[2]):
                for l in range(coefs.shape[3]):
                    maxError = max(maxError, abs(unfolded.coefs[i, j, k, l] - spline.coefs[i, j, k, l]))
    assert maxError <= np.finfo(float).eps

def test_graph():
    simpleFunc = bspy.Spline(2, 1, [3, 4], [4, 5], [[0.0, 0, 0, 0.4, 1, 1, 1],
                             [0.0, 0, 0, 0, 0.6, 1, 1, 1, 1]], [[1.0, 2, 3, 4, 2, 3, 4, 5,
                              3, 4, 5, 6, 4, 5, 6, 7, 5, 6, 7, 8]])
    graphFunc = simpleFunc.graph()
    uvfPoint = graphFunc([0.27, 0.83])
    assert abs(uvfPoint[0] - 0.27) <= 4.0 * np.finfo(float).eps
    assert abs(uvfPoint[1] - 0.83) <= 4.0 * np.finfo(float).eps
    assert abs(uvfPoint[2] - simpleFunc([0.27, 0.83])[0]) <= 4.0 * np.finfo(float).eps

def test_insert_knots():
    maxError = 0.0
    newCurve = myCurve.insert_knots([[.2, .3]])
    for [u, x, y] in truthCurve:
        [xTest, yTest] = newCurve.evaluate([u])
        maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError <= np.finfo(float).eps

def test_integral():
    maxError = 0.0
    myIntegral = myCurve.integrate()
    myDerivative = myIntegral.differentiate()
    for [u, x, y] in truthCurve:
        [xTest, yTest] = myCurve([u])
        [x, y] = myDerivative.evaluate([u])
        maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError <= np.finfo(float).eps

    limits = myCurve.domain()
    for u in np.linspace(limits[0][0], limits[0][1], 11):
        x = scipy.integrate.quad(lambda s: myCurve([s])[0], limits[0][0], u)[0]
        xTest = myCurve.integral([1], [limits[0][0]], [u])[0]
        maxError = max(maxError, (xTest - x) ** 2)
    assert maxError <= np.finfo(float).eps

def test_intersect():

    return # Comment this line to run the following additional really lengthy test

    maxError = 0.0
    F = lambda u , v : (u ** 2 + (v - 3/4) ** 2 - 1/25) * \
        ((u - 2/5) ** 2 + (v - 3/5) ** 2 - 1/25) * \
        (u ** 2 + (v - 3/2) ** 2 - 25/16) * \
        ((u - 1) ** 2 + (v - 3/10) ** 2 - 1/25)
    order = 9
    knots = [0.0] * order + [1.0] * order
    nCoef = order
    points = []
    for u in np.linspace(0.0, 1.0, nCoef):
        for v in np.linspace(0.0, 1.0, nCoef):
            points.append((u, v, u, v, F(u, v)))
    spline = bspy.Spline.least_squares(2, 3, (order, order), points, (knots, knots))

    order = 4
    knots = [0.0] * order + [1.0] * order
    nCoef = order
    points = []
    for u in np.linspace(0.0, 1.0, nCoef):
        for v in np.linspace(0.0, 1.0, nCoef):
            points.append((u, v, 2*u - 0.5, 2*v - 0.5, 0.0))
    plane = bspy.Spline.least_squares(2, 3, (order, order), points, (knots, knots))

    contours = spline.intersect(plane)
    for contour in contours:
        for t in np.linspace(0.0, 1.0, 11):
            uvst = contour((t,))
            maxError = max(maxError, np.linalg.norm(spline(uvst[:2]) - plane(uvst[2:])))
    assert maxError <= np.finfo(float).eps ** 0.2

def test_matmul():
    mySpline = bspy.Spline(1, 1, (4,), (4,), ((0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0),), ((1.0, 2.0, 3.0, 4.0),))
    try:
        prodSpline = [2.0] @ mySpline
        assert prodSpline.coefs[0][1] == 4.0, "Wrong dot product computed"
    except:
        return NotImplementedError
    try:
        prodSpline = np.array([3.0]) @ mySpline
        assert prodSpline.coefs[0][2] == 9.0, "Wrong dot product computed"
    except:
        pass    # Currently dispatches to numpy __matmul__ and fails
    try:
        prodSpline = mySpline @ [4.0]
        assert prodSpline.coefs[0][3] == 16.0, "Wrong dot product computed"
    except:
        return NotImplementedError
    try:
        prodSpline = mySpline @ np.array([5.0])
        assert prodSpline.coefs[0][0] == 5.0, "Wrong dot product computed"
    except:
        return NotImplementedError
    try:
        prodSpline = [[1.0], [2.0]] @ mySpline
        assert prodSpline.coefs[1][1] == 4.0, "Wrong dot product computed"
    except:
        return NotImplementedError
    try:
        prodSpline = np.array([[1.0], [2.0]]) @ mySpline
        assert prodSpline.coefs[1][2] == 6.0, "Wrong dot product computed"
    except:
        pass    # Currently dispatches to numpy __matmul__ and fails
    try:
        prodSpline = mySpline @ [[1.0, 2.0]]
        assert prodSpline.coefs[1][3] == 8.0, "Wrong dot product computed"
    except:
        return NotImplementedError
    try:
        prodSpline = mySpline @ np.array([[1.0, 2.0]])
        assert prodSpline.coefs[1][0] == 2.0, "Wrong dot product computed"
    except:
        return NotImplementedError

def test_multiply():
    maxError = 0.0
    spline1 = bspy.Spline(1, 2, (5,), (5,), [np.array([0, 0, 0, 0, 0.2, 0.5, 0.5, 1, 1, 1], float)], 
        np.array(((100, 260), (260, 100), (580, 260), (260, 420), (420, 100)), float))
    spline2 = bspy.Spline(1, 2, (4,), (6,), [np.array([0, 0, 0, 0.2, 0.3, 0.4, 0.5, 0.5, 1, 1], float)], 
        np.array(((260, 100), (100, 260), (260, 420), (420, 420), (580, 260), (420, 100)), float))
    
    # Multiply with shared independent variable.
    multiplied = spline1 * spline2
    maxError = 0.0
    for u in np.linspace(spline1.knots[0][spline1.order[0]-1], spline1.knots[0][spline1.nCoef[0]], 100):
        x = spline1(u) * spline2(u)
        xTest = multiplied(u)
        maxError = max(maxError, np.linalg.norm(x - xTest))
    assert maxError <= np.sqrt(np.finfo(float).eps)

    # Multiply with completely independent variables.
    multiplied = spline1.multiply(spline2, None, 'D')
    maxError = 0.0
    for u in np.linspace(spline1.knots[0][spline1.order[0]-1], spline1.knots[0][spline1.nCoef[0]], 21):
        for v in np.linspace(spline2.knots[0][spline2.order[0]-1], spline2.knots[0][spline2.nCoef[0]], 21):
            x = np.dot(spline1(u), spline2(v))
            xTest = multiplied([u, v])[0]
            maxError = max(maxError, (xTest - x) ** 2)
    assert maxError <= np.finfo(float).eps

def test_normal():
    spline = bspy.Spline(2, 3, [3, 4], [4, 5], [[0,0,0,.5,1,1,1], [0,0,0,0,.5,1,1,1,1]],
                        [[0, 0, 0, 0, 0, .3, .3, .3, .3, .3, .7, .7, .7, .7, .7, 1, 1, 1, 1, 1],
                        [0, .25, .5, .75, 1, 0, .25, .5, .75, 1, 0, .25, .5, .75, 1, 0, .25, .5, .75, 1],
                        [0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0]])
    du = spline.differentiate(0)
    dv = spline.differentiate(1)
    normal = du.multiply(dv, (0, 1), 'C')
    normal2 = spline.normal_spline()
    for u in np.linspace(0.0, 1.0, 5):
        for v in np.linspace(0.0, 1.0, 5):
            n = spline.normal((u, v), False)
            assert np.isclose(np.dot(du((u, v)), n), 0.0)
            assert np.isclose(np.dot(dv((u, v)), n), 0.0)
            assert np.allclose(n, normal((u, v)))
            assert np.allclose(n, normal2((u, v)))
            assert np.isclose(np.dot(spline.normal((u, v)), n), np.linalg.norm(n))
    assert np.allclose(normal.coefs, normal2.coefs)

    spline = bspy.Spline(1, 2, [4], [5], [[0,0,0,0,.5,1,1,1,1]], [[0, .3, .6, .7, 1], [0, .25, .5, .75, 1]])
    du = spline.differentiate()
    normal = spline.normal_spline()

    for u in np.linspace(0.0, 1.0, 5):
        assert np.isclose(np.dot(du((u,)), spline.normal((u,))), 0.0)
        assert np.isclose(np.dot(du((u,)), normal((u,))), 0.0)

def test_least_squares():
    # Replicate 1D spline using its knots. Should be precise to machine epsilon.
    spline = bspy.Spline(1, 2, (4,), (6,), [np.array([0, 0, 0, 0.2, 0.3, 0.4, 0.5, 0.5, 1, 1], float)], 
        np.array(((260, 100), (100, 260), (260, 420), (420, 420), (580, 260), (420, 100)), float))
    values = [(u, *spline([u])) for u in np.linspace(spline.knots[0][spline.order[0]-1], spline.knots[0][spline.nCoef[0]], spline.nCoef[0] + 5)]
    u = spline.knots[0][spline.order[0]-1]
    values.append((u, *spline([u]), *spline.derivative([1], [u])))
    u = spline.knots[0][spline.nCoef[0]]
    values.append((u, *spline([u]), *spline.derivative([1], [u])))
    fit = bspy.Spline.least_squares(spline.nInd, spline.nDep, spline.order, values, spline.knots)
    maxError = 0.0
    for u in np.linspace(spline.knots[0][spline.order[0]-1], spline.knots[0][spline.nCoef[0]], 100):
        xyz = spline([u]) - fit([u])
        maxError = max(maxError, np.sqrt(xyz @ xyz))
    assert maxError <= np.sqrt(np.finfo(float).eps)
    assert maxError <= fit.accuracy

    # Create knots and fit data taken from 1D spline. Should match returned accuracy at data points.
    fit = bspy.Spline.least_squares(spline.nInd, spline.nDep, spline.order, values)
    maxError = 0.0
    for point in values:
        xyz = point[spline.nInd:spline.nInd + spline.nDep] - fit(point[:spline.nInd])
        maxError = max(maxError, np.sqrt(xyz @ xyz))
    assert maxError <= fit.accuracy

    # Replicate 2D spline using its knots. Should be precise to machine epsilon.
    spline = mySurface
    values = []
    u = spline.knots[0][spline.order[0]-1]
    v = spline.knots[1][spline.order[1]-1]
    values.append((u, v, *spline([u, v]), *spline.derivative([1, 0], [u, v]), *spline.derivative([0, 1], [u, v])))
    for u in np.linspace(spline.knots[0][spline.order[0]-1], spline.knots[0][spline.nCoef[0]], spline.nCoef[0] + 3):
        for v in np.linspace(spline.knots[1][spline.order[1]-1], spline.knots[1][spline.nCoef[1]], spline.nCoef[1] + 7):
            values.append((u, v, *spline((u, v))))
    u = spline.knots[0][spline.nCoef[0]]
    v = spline.knots[1][spline.nCoef[1]]
    values.append((u, v, *spline([u, v]), *spline.derivative([1, 0], [u, v]), *spline.derivative([0, 1], [u, v])))
    fit = bspy.Spline.least_squares(spline.nInd, spline.nDep, spline.order, values, spline.knots)
    maxError = 0.0
    for u in np.linspace(spline.knots[0][spline.order[0]-1], spline.knots[0][spline.nCoef[0]], 21):
        for v in np.linspace(spline.knots[1][spline.order[1]-1], spline.knots[1][spline.nCoef[1]], 21):
            xyz = spline([u,v]) - fit([u,v])
            maxError = max(maxError, np.sqrt(xyz @ xyz))
    assert maxError <= np.sqrt(np.finfo(float).eps)
    assert maxError <= fit.accuracy

    # Create knots and fit data taken from 2D spline. Should match returned accuracy at data points.
    fit = bspy.Spline.least_squares(spline.nInd, spline.nDep, spline.order, values, compression=30)
    maxError = 0.0
    for point in values:
        xyz = point[spline.nInd:spline.nInd + spline.nDep] - fit(point[:spline.nInd])
        maxError = max(maxError, np.sqrt(xyz @ xyz))
    assert maxError <= fit.accuracy

def test_line():
    myLine = bspy.Spline.line([0.0, 1.0, 2.0], [2.0, 3.0, 4.0])
    assert myLine.nInd == 1
    assert myLine.nDep == 3
    midPoint = myLine(0.5)
    assert midPoint[0] == 1.0
    assert midPoint[1] == 2.0
    assert midPoint[2] == 3.0
    return

def test_point():
    myPoint = bspy.Spline.point([0.0, 1.0, 2.0])
    mvPointEval = myPoint()
    assert abs(np.linalg.norm(myPoint() - np.array([0.0, 1.0, 2.0]))) < np.finfo(float).eps

def test_remove_knot():
    noDiff = 1.0e-15
    a = np.array([[0.3, 0.0], [0.7, 0.3], [0.0, 0.7]])
    rhs = np.array([[0.3, 0.5, 0.4], [1.0, 0.0, -0.8]]).T
    newCoefs, residuals, rank, sigmas = np.linalg.lstsq(a, rhs, rcond = None)
    correctSlimmed = bspy.Spline(1, 2, [4], [4], [[0.0,0,0,0,1,1,1,1]], [[0, 0], newCoefs[0], newCoefs[1], [1, 1]])
    attempt, residuals = myCurve.remove_knot(4)
    coefDiff = correctSlimmed.coefs - attempt.coefs
    assert np.linalg.norm(coefDiff) < noDiff

    newCurve = myCurve.insert_knots([[0.43, 0.57]])
    coefDiff = myCurve.coefs - newCurve.remove_knot(5)[0].remove_knot(5)[0].coefs
    assert np.linalg.norm(coefDiff) < noDiff

def test_remove_knots():
    neededAccuracy = 1.0e-12
    newSurf = mySurface.insert_knots([[0.1, 0.3, 0.7, 0.9], [0.25, 0.75]])
    simplified = mySurface - newSurf.remove_knots(neededAccuracy)
    assert np.linalg.norm(simplified.coefs) < neededAccuracy

def test_reverse():
    mySpline = myCurve.reverse()
    assert np.linalg.norm(myCurve(0.43) - mySpline(0.57)) < np.finfo(float).eps

def test_reparametrize():
    maxError = 0.0
    reparametrized = myCurve.reparametrize([[1.5, 2.0]])
    for [u, x, y] in truthCurve:
        [xTest, yTest] = reparametrized.evaluate([u * 0.5 + 1.5])
        maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError <= np.finfo(float).eps

def test_revolve():
    maxError = 0.0
    angle = 112
    revolved = myCurve.revolve(angle)
    for [u, x, y] in truthCurve:
        for v in np.linspace(0.0, 1.0, 5):
            theta = v * angle * np.pi / 180
            values = revolved((v, u))
            maxError = max(maxError, (values[0] - x * np.cos(theta)) ** 2 + (values[1] - x * np.sin(theta)) ** 2 + (values[2] - y) ** 2)
    assert maxError <= np.finfo(float).eps

def test_scale():
    maxError = 0.0
    scaledCurve = myCurve.scale([2.0, 3.0])
    for [u, x, y] in truthCurve:
        [xTest, yTest] = scaledCurve.evaluate([u])
        maxError = max(maxError, (xTest - 2.0 * x) ** 2 + (yTest - 3.0 * y) ** 2)
    assert maxError <= np.finfo(float).eps

    maxError = 0.0
    scaledCurve = 3.0 * myCurve
    for [u, x, y] in truthCurve:
        [xTest, yTest] = scaledCurve.evaluate([u])
        maxError = max(maxError, (xTest - 3.0 * x) ** 2 + (yTest - 3.0 * y) ** 2)
    assert maxError <= np.finfo(float).eps

    maxError = 0.0
    scaledCurve = (1, 2, 3) * myCurve.dot((1.0, 0.0))
    for [u, x, y] in truthCurve:
        (xTest, yTest, zTest) = scaledCurve.evaluate(u)
        maxError = max(maxError, (xTest - 1.0 * x) ** 2 + (yTest - 2.0 * x) ** 2 + (zTest - 3.0 * x) ** 2)
    assert maxError <= np.finfo(float).eps

def test_section():
    def expTest(t):
        x = t
        xp = 1.0
        xpp = 0.0
        y = math.exp(t)
        yp = y
        ypp = y
        theta = 180.0 * math.atan2(yp, xp) / math.pi
        kappa = (xp * ypp - yp * xpp) / (xp ** 2 + yp ** 2) ** 1.5
        return (x, y, theta, kappa)
    def circleTest(u):
        theta = u * math.pi / 2.0
        cosTheta = math.cos(theta)
        sinTheta = math.sin(theta)
        return (sinTheta, cosTheta, -90 * u, -1.0)
    for testFunc, desiredTol in zip([expTest, circleTest],
                        [[2.0e-5, 4.0e-7, 7.0e-9, 2.0e-10], [2.0e-5, 5.0e-8, 2.0e-10, 7.0e-13]]):
        testPoints = [testFunc(x) for x in np.linspace(0.0, 1.0, 9)]
        gridTest = [bspy.Spline.section([testPoints[i] for i in [0, 8]]),
                    bspy.Spline.section([testPoints[i] for i in [0, 4, 8]]),
                    bspy.Spline.section([testPoints[i] for i in [0, 2, 4, 6, 8]]),
                    bspy.Spline.section(testPoints)]
        maxErrors = []
        for spl in gridTest:
            errors = []
            for xValue in np.linspace(0.0, 1.0, 38)[1:-1]:
                if testFunc == circleTest:
                    errors.append(np.abs(np.linalg.norm(spl(xValue)) - 1.0))
                else:
                    [tValue] = ([1, 0] @ spl - [xValue]).zeros()
                    errors.append(np.linalg.norm(testFunc(xValue)[:2] - spl(tValue)))
            maxErrors.append(max(errors))
        for myError, intended in zip(maxErrors, desiredTol):
            assert myError <= intended
        rate = [0]
        for i in range(3):
            rate.append(math.log2(maxErrors[i] / maxErrors[i + 1]))

def test_sphere():
    mySphere = bspy.Spline.sphere(1.3, 1.0e-12)
    tvals = np.linspace(0.0, 1.0, 31)
    uvals = []
    for tval in tvals:
        uvals = uvals + list(tvals)
    vvals = []
    for tval in tvals:
        vvals = vvals + len(tvals) * [tval]
    xvals, yvals, zvals = mySphere(uvals, vvals)
    for xval, yval, zval in zip(xvals, yvals, zvals):
        assert abs(np.linalg.norm([xval, yval, zval]) - 1.3) < 1.0e-12
    
def test_subtract():
    maxError = 0.0
    spline1 = bspy.Spline(1, 2, (5,), (5,), [np.array([0, 0, 0, 0, 0.2, 0.5, 0.5, 1, 1, 1], float)], 
        np.array(((260, 100), (100, 260), (260, 420), (580, 260), (420, 100)), float))
    spline2 = bspy.Spline(1, 2, (4,), (6,), [np.array([0, 0, 0, 0.2, 0.3, 0.4, 0.5, 0.5, 1, 1], float)], 
        np.array(((260, 100), (100, 260), (260, 420), (420, 420), (580, 260), (420, 100)), float))
    
    # Subtract with shared independent variable.
    subtracted = spline1 - spline2
    maxError = 0.0
    for u in np.linspace(spline1.knots[0][spline1.order[0]-1], spline1.knots[0][spline1.nCoef[0]], 100):
        [x, y] = spline1.evaluate([u]) - spline2.evaluate([u])
        [xTest, yTest] = subtracted.evaluate([u])
        maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError <= np.finfo(float).eps

    # Subtract with completely independent variables.
    subtracted = spline1.subtract(spline2)
    maxError = 0.0
    for u in np.linspace(spline1.knots[0][spline1.order[0]-1], spline1.knots[0][spline1.nCoef[0]], 21):
        for v in np.linspace(spline2.knots[0][spline2.order[0]-1], spline2.knots[0][spline2.nCoef[0]], 21):
            [x, y] = spline1.evaluate([u]) - spline2.evaluate([v])
            [xTest, yTest] = subtracted.evaluate([u,v])
            maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError <= np.finfo(float).eps

def test_torus():
    myTorus = bspy.Spline.torus(1.0, 2.0, 1.0e-12)
    tvals = np.linspace(0.0, 1.0, 31)
    uvals = []
    for tval in tvals:
        uvals = uvals + list(tvals)
    vvals = []
    for tval in tvals:
        vvals = vvals + len(tvals) * [tval]
    xvals, yvals, zvals = myTorus(uvals, vvals)
    for xval, yval, zval in zip(xvals, yvals, zvals):
        torusPt = np.array([xval, yval, zval])
        genPt = np.array([xval, yval, 0.0])
        genPt = 1.5 * genPt / np.linalg.norm(genPt)
        assert abs(np.linalg.norm(torusPt - genPt) - 0.5) < 1.0e-12    
    return

def test_transform():
    maxError = 0.0
    transformedCurve = myCurve.transform(np.array([[2.0, 3.0], [-1.0, -4.0]]))
    for [u, x, y] in truthCurve:
        [xTest, yTest] = transformedCurve.evaluate([u])
        maxError = max(maxError, (xTest - (2.0 * x + 3.0 * y)) ** 2 + (yTest - (-1.0 * x - 4.0 * y)) ** 2)
    assert maxError <= np.finfo(float).eps
    shape234 = bspy.Spline(2, 2, [3, 4], [3, 4], [[0.0, 0, 0, 1, 1, 1], [0.0, 0, 0, 0, 1, 1, 1, 1]],
                           [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
                            [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]])
    shape334 = [[2, 0], [0, 0.5], [1, 1]] @ shape234
    assert shape334.coefs[0,1,0] == 8
    assert shape334.coefs[0,2,1] == 18
    assert shape334.coefs[1,0,2] == 11
    assert shape334.coefs[2,2,3] == 42

def test_translate():
    maxError = 0.0
    translatedCurve = myCurve.translate([2.0, 3.0])
    for [u, x, y] in truthCurve:
        [xTest, yTest] = translatedCurve.evaluate([u])
        maxError = max(maxError, (xTest - (2.0 + x)) ** 2 + (yTest - (3.0 + y)) ** 2)
    assert maxError <= np.finfo(float).eps

def test_trim():
    maxError = 0.0
    left = 13
    right = 89
    trimmed = myCurve.trim([[truthCurve[left][0], truthCurve[right][0]]])
    for [u, x, y] in truthCurve[left:right+1]:
        [xTest, yTest] = trimmed.evaluate([u])
        maxError = max(maxError, (xTest - x) ** 2 + (yTest - y) ** 2)
    assert maxError <= np.finfo(float).eps

def test_zeros():
    def check_1D_roots(expectedRoots, roots, tolerance):
        assert len(expectedRoots) == len(roots)
        for (expectedRoot, root) in zip(expectedRoots, roots):
            if type(expectedRoot) is type((1.0, 2.0),):
                assert abs(expectedRoot[0] - root[0]) < tolerance
                assert abs(expectedRoot[1] - root[1]) < tolerance
            else:
                assert abs(expectedRoot - root) < tolerance

    def check_roots(spline, expectedRootCount, roots, tolerance):
        assert expectedRootCount == len(roots)
        for root in roots:
            value = spline(root)
            assert np.dot(value, value) < np.sqrt(tolerance)

    tolerance = 1.0e-14

    spline = bspy.Spline(1, 1, (3,), (3,), [[0., 0., 0., 1., 1., 1.]], [[-1.2, -0.2,  0.8]], 0.0, {})
    expectedRoots = (0.6,)
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    spline = bspy.Spline(1, 1, (4,), (4,), ((0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0),), ((1.0, -2.0, -2.0, 1.0),))
    expectedRoots = (0.12732200375003502, 0.8726779962499649)
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    spline = bspy.Spline(1, 1, (4,), (5,), ((0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 2.0, 2.0, 2.0),), ((1.0, -2.0, -2.0, 3.0, -1.0),))
    expectedRoots = (0.12679064971673917, 1.1797004713504056, 1.9015253538967793)
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    spline = bspy.Spline(1, 1, (4,), (10,), ((0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 4.0, 7.0, 7.0, 8.0, 10.0, 10.0, 10.0, 10.0),), ((1.0, -2.0, -3.0, -4.0, 5.0, 6.0, 7.0, -8.0, -9.0, 1.0),))
    expectedRoots = (0.1242770027023396, 3.556169240708571, 7.866681344525834, 9.930791005970617)
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    spline = bspy.Spline(1, 1, (5,), (7,), ((0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 4.0, 4.0, 4.0, 4.0, 4.0),), ((1.0, -2.0, -3.0, 4.0, 5.0, -6.0, 1.0),))
    expectedRoots = (0.09400220779701107, 1.2018213294830917, 3.019267586117955, 3.918820194105917)
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    spline = bspy.Spline(1, 1, (6,), (11,), ((0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 2.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0),), ((2.0, -1.0, -1.0, -1.0, 1.0, 2.0, 2.0, -3.0, -3.0, 4.0, 1.0),))
    expectedRoots = (0.19780681921299614, 0.959258605483323, 2.3682761525810267, 3.3362282254078597)
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    spline = bspy.Spline(1, 1, (4,), (4,), ((0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0),), ((1.0, -13.0 / 9.0, 25.0 / 12.0, -3.0),))
    expectedRoots = (0.39999999558761995, 0.4285714285714262)
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    spline = bspy.Spline(1, 1, (4,), (6,), ((0.0, 0.0, 0.0, 0.0, 0.3, 0.7, 1.0, 1.0, 1.0, 1.0),), ((1.3, 0, 0, 0, 0, -2.6),))
    expectedRoots = ((0.3, 0.7),)
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    spline = bspy.Spline(1, 1, (4,), (6,), ((0.0, 0.0, 0.0, 0.0, 0.3, 0.7, 1.0, 1.0, 1.0, 1.0),), ((0, 0, 0, 0, 0, -2.6),))
    expectedRoots = ((0.0, 0.7),)
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    spline = bspy.Spline(1, 1, (4,), (11,), ((0.0, 0.0, 0.0, 0.0, 0.1, 0.2, 0.3, 0.5, 0.6, 0.7, 0.8, 1.0, 1.0, 1.0, 1.0),), ((4, 0, 0, 0, 0, -2.6, 0, 0, 0, 0, 0),))
    expectedRoots = ((0.1, 0.2), (0.7, 1.0))
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    spline = bspy.Spline(1, 1, (4,), (7,), ((0.0, 0.0, 0.0, 0.0, 0.25, 0.5, 0.75, 1.0, 1.0, 1.0, 1.0),), ((1.0, -2.0, 2.0, 0.0, -2.0, 2.0, -1.0),))
    expectedRoots = (0.03580961131802156, 0.1861089501087097, 0.5, 0.8138910498912902, 0.9641903886819785)
    roots = spline.zeros()
    check_1D_roots(expectedRoots, roots, tolerance)

    data = []
    for u in np.linspace(-2.0, 2.0, 3):
        for v in np.linspace(-2.0, 2.0, 7):
            data.append((u, v, 9 * u * u + v * v - 1.0, u - v))
    spline = bspy.Spline.least_squares(2, 2, (3,3), data)
    roots = spline.zeros(tolerance)
    check_roots(spline, 2, roots, tolerance)

    data = []
    for u in np.linspace(-2.0, 2.0, 3):
        for v in np.linspace(-2.0, 2.0, 7):
            data.append((u, v, 9 * u * u + v * v - 1.0, u))
    spline = bspy.Spline.least_squares(2, 2, (3,3), data)
    roots = spline.zeros(tolerance)
    check_roots(spline, 2, roots, tolerance)

    data = []
    for u in np.linspace(-2.0, 2.0, 3):
        for v in np.linspace(-2.0, 2.0, 7):
            data.append((u, v, 9 * u * u + v * v - 1.0, v))
    spline = bspy.Spline.least_squares(2, 2, (3,3), data)
    roots = spline.zeros(tolerance)
    check_roots(spline, 2, roots, tolerance)

    data = []
    for u in np.linspace(-2.0, 2.0, 21):
        for v in np.linspace(-2.0, 2.0, 21):
            data.append((u, v, math.cos(math.pi * (u * u + v * v)), u - v))
    spline = bspy.Spline.least_squares(2, 2, (4,4), data)
    roots = spline.zeros(tolerance)
    check_roots(spline, 16, roots, tolerance)
